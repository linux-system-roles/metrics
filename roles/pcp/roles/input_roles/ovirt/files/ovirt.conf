[ovirt-cpu]
interval = 10s
user              = ,,s,,
user.label        = cpu.percent.user
user.formula      = 100 * kernel.all.cpu.vuser      / hinv.ncpu
nice              = ,,s,,
nice.label        = cpu.percent.nice
nice.formula      = 100 * kernel.all.cpu.nice       / hinv.ncpu
system            = ,,s,,
system.label      = cpu.percent.system
system.formula    = 100 * kernel.all.cpu.sys        / hinv.ncpu
wait              = ,,s,,
wait.label        = cpu.percent.wait
wait.formula      = 100 * kernel.all.cpu.wait.total / hinv.ncpu
steal             = ,,s,,
steal.label       = cpu.percent.steal
steal.formula     = 100 * kernel.all.cpu.steal      / hinv.ncpu
interrupt         = ,,s,,
interrupt.label   = cpu.percent.interrupt
interrupt.formula = 100 * kernel.all.cpu.irq.hard   / hinv.ncpu
softirq           = ,,s,,
softirq.label     = cpu.percent.softirq
softirq.formula   = 100 * kernel.all.cpu.irq.soft   / hinv.ncpu
idle              = ,,s,,
idle.label        = cpu.percent.idle
idle.formula      = 100 * kernel.all.cpu.idle       / hinv.ncpu

[ovirt-load]
interval        = 10s
kernel.all.load = load.load.longterm,"15 minute"
#kernel.all.load = load.load.midterm,"5 minute"
#kernel.all.load = load.load.shortterm,,1

[ovirt-df]
interval = 10s
# collectd.df.df_complex
# The amount of free, used, and reserved disk space, in bytes, on this file system.
df_complex         = ,,
df_complex.label   = df.df_complex
df_complex.formula = (filesys.free + filesys.used + filesys.avail)

# collectd.df.percent_bytes
# The amount of free, used, and reserved disk space, as a percentage
# of total disk space, on this file system.
percent_bytes         = ,,
percent_bytes.label   = df.percent_bytes
percent_bytes.formula = 100 * filesys.avail / filesys.capacity

[ovirt-disk]
interval = 10s
# collectd.disk.disk_ops.read
#The number of disk read operations.
read        = ,,
read.label  = disk.disk_ops.read
read.fomula = disk.dev.read

#collectd.disk.disk_ops.write
#The number of disk write operations.
write         = ,,
write.label   = disk.disk_ops.write
write.formula = disk.dev.write

#collectd.disk.disk_merged.read
#The number of disk reads that have been merged into single physical
#disk access operations. In other words, this metric measures the
#number of instances in which one physical disk access served multiple
#disk reads. The higher the number, the better.
read_all         = ,,
read_all.label   = disk.disk_merged.read
read_all.formula = disk.all.read


#collectd.disk.disk_merged.write
#The number of disk writes that were merged into single physical disk
#access operations. In other words, this metric measures the number of
#instances in which one physical disk access served multiple write
#operations. The higher the number, the better.
write_all         = ,,
write_all.label   = disk.disk_merged.write
write_all.formula = disk.all.write


#collectd.disk.disk_time.read
#The average amount of time it took to do a read operation, in
#milliseconds.
read_time         = ,,
read_time.label   = disk.disk_time.read
read_time.formula = disk.dev.read_rawactive

#collectd.disk.disk_time.write
#The average amount of time it took to do a write operation, in
#milliseconds.
write_time         = ,,
write_time.label   = disk.disk_time.write
write_time.formula = disk.dev.write_rawactive

#collectd.disk.pending_operations
#The queue size of pending I/O operations.
pending_ops         = ,,
pending_ops.label   = disk.pending_operations
pending_ops.formula = disk.dev.aveq

#collectd.disk.disk_io_time.io_time
#The time spent doing I/Os in milliseconds. This can be used as a
#device load percentage, where a value of 1 second of time spent
#represents a 100% load.
iotime         = ,,
iotime.label   = disk.disk_io_time_io_time
iotime.formula = disk.dev.total_rawactive


#collectd.disk.disk_io_time.weighted_io_time
#A measure of both I/O completion time and the backlog that may be
#accumulating.
weightedtime         = ,,
weightedtime.label   = disk.disk_io_time_weighted_io_time
weightedtime.formula = (disk.dev.aveq + disk.dev.total_rawactive)/2


[ovirt-entropy]
interval = 10s
#collectd.entropy.entropy
#The entropy pool size, in bits, on the host.
entropy         = ,,
entropy.label   = entropy.entropy
entropy.formula = kernel.all.entropy.poolsize

#[ovirt-network]
#interval = 10s
#todo

[ovirt-memory]
interval = 10s

#collectd.memory.memory.used
#The total amount of memory used.
used = ,,
used.label = memory.memory.used
used.formula = mem.util.used
#collectd.memory.memory.free
#The total amount of unused memory.
free = ,,
free.label = memory.memory.free
free.formula = mem.util.free

#collectd.memory.memory.cached
#The amount of memory used for caching disk data for reads, memory-mapped files, or tmpfs data.
cached = ,,
cached.label = memory.memory.cached
cached.formula = mem.util.cached

#collectd.memory.memory.buffered
#The amount of memory used for buffering, mostly for I/O operations.
buffered = ,,
buffered.label = memory.memory.buffered
buffered.formula = mem.util.bufmem

#collectd.memory.memory.slab_recl
#The amount of reclaimable memory used for slab kernel allocations.
slab_recl = ,,
slab_recl.label = memory.memory.slab_recl
slab_recl.formula = mem.util.slabReclaimable

#collectd.memory.memory.slab_unrecl
#Amount of unreclaimable memory used for slab kernel allocations.
slab_unrecl = ,,
slab_unrecl.label = memory.memory.slab_unrecl
slab_unrecl.formula = mem.util.slabUnreclaimable

#collectd.memory.percent.used
#The total amount of memory used.
pused = ,,
pused.label = memory.percent.used
pused.formula = 100 * mem.util.used / mem.physmem
#collectd.memory.memory.free
#The total amount of unused memory.
pfree = ,,
pfree.label = memory.percent.free
pfree.formula = 100 * mem.util.free / mem.physmem

#collectd.memory.memory.cached
#The amount of memory used for caching disk data for reads, memory-mapped files, or tmpfs data.
pcached = ,,
pcached.label = memory.percent.cached
pcached.formula = 100 * mem.util.cached / mem.physmem

#collectd.memory.memory.buffered
#The amount of memory used for buffering, mostly for I/O operations.
pbuffered = ,,
pbuffered.label = memory.percent.buffered
pbuffered.formula = 100 * mem.util.bufmem / mem.physmem

#collectd.memory.memory.slab_recl
#The amount of reclaimable memory used for slab kernel allocations.
pslab_recl = ,,
pslab_recl.label = memory.percent.slab_recl
pslab_recl.formula = 100 * mem.util.slabReclaimable / mem.physmem

#collectd.memory.memory.slab_unrecl
#Amount of unreclaimable memory used for slab kernel allocations.
pslab_unrecl = ,,
pslab_unrecl.label = memory.percent.slab_unrecl
pslab_unrecl.formula = 100 * mem.util.slabUnreclaimable / mem.physmem

[ovirt-nfs]
interval = 10s
# collectd.nfs.nfs_procedure
#null
null         = ,,
null.label   = nfs.nfs_procedure.null
null.formula = nfsclient.ops.null.ops
#getattr
getattr         = ,,
getattr.label   = nfs.nfs_procedure.getattr
getattr.formula = nfsclient.ops.getattr.ops
#lookup
lookup         = ,,
lookup.label   = nfs.nfs_procedure.lookup
lookup.formula = nfsclient.ops.lookup.ops
#access
access         = ,,
access.label   = nfs.nfs_procedure.access
access.formula = nfsclient.ops.access.ops
#readlink
readlink         = ,,
readlink.label   = nfs.nfs_procedure.readlink
readlink.formula = nfsclient.ops.readlink.ops
#read
read         = ,,
read.label   = nfs.nfs_procedure.read
read.formula = nfsclient.ops.read.ops
#write
write         = ,,
write.label   = nfs.nfs_procedure.write
write.formula = nfsclient.ops.write.ops
#create
create         = ,,
create.label   = nfs.nfs_procedure.create
create.formula = nfsclient.ops.create.ops
#mkdir
mkdir         = ,,
mkdir.label   = nfs.nfs_procedure.mkdir
mkdir.formula = nfsclient.ops.mkdir.ops
#symlink
symlink         = ,,
symlink.label   = nfs.nfs_procedure.symlink
symlink.formula = nfsclient.ops.symlink.ops
#mknod
mknod         = ,,
mknod.label   = nfs.nfs_procedure.mknod
mknod.formula = nfsclient.ops.mknod.ops
#rename
rename         = ,,
rename.label   = nfs.nfs_procedure.rename
rename.formula = nfsclient.ops.rename.ops
#readdir
readdir         = ,,
readdir.label   = nfs.nfs_procedure.readdir
readdir.formula = nfsclient.ops.readdir.ops
#remove
remove         = ,,
remove.label   = nfs.nfs_procedure.remove
remove.formula = nfsclient.ops.remove.ops
#link
link         = ,,
link.label   = nfs.nfs_procedure.link
link.formula = nfsclient.ops.link.ops
#fsstat
fsstat         = ,,
fsstat.label   = nfs.nfs_procedure.fsstat
fsstat.formula = nfsclient.ops.fsstat.ops
#fsinfo
fsinfo         = ,,
fsinfo.label   = nfs.nfs_procedure.fsinfo
fsinfo.formula = nfsclient.ops.fsinfo.ops
#readdirplus
readdirplus         = ,,
readdirplus.label   = nfs.nfs_procedure.readdirplus
readdirplus.formula = nfsclient.ops.readdirplus.ops
#pathconf
pathconf         = ,,
pathconf.label   = nfs.nfs_procedure.pathconf
pathconf.formula = nfsclient.ops.pathconf.ops
#rmdir
rmdir         = ,,
rmdir.label   = nfs.nfs_procedure.rmdir
rmdir.formula = nfsclient.ops.rmdir.ops
#commit
commit         = ,,
commit.label   = nfs.nfs_procedure.commit
commit.formula = nfsclient.ops.commit.ops
#compound
#compound         = ,,
#compound.label   = nfs.nfs_procedure.compound
#compound.formula = nfsclient.ops.compound.ops
#reserved
#reserved         = ,,
#reserved.label   = nfs.nfs_procedure.reserved
#reserved.formula = nfsclient.ops.reserved.ops
#close
close         = ,,
close.label   = nfs.nfs_procedure.close
close.formula = nfsclient.ops.close.ops
#delegpurge
#delegpurge         = ,,
#delegpurge.label   = nfs.nfs_procedure.delegpurge
#delegpurge.formula = nfsclient.ops.delegpurge.ops
#putfh
#putfh         = ,,
#putfh.label   = nfs.nfs_procedure.putfh
#putfh.formula = nfsclient.ops.putfh.ops
#putpubfh putrootfh
#putpubfh putrootfh         = ,,
#putpubfh putrootfh.label   = nfs.nfs_procedure.putpubfh putrootfh
#putpubfh putrootfh.formula = nfsclient.ops.putpubfh putrootfh.ops
#renew
renew         = ,,
renew.label   = nfs.nfs_procedure.renew
renew.formula = nfsclient.ops.renew.ops
#restorefh
#restorefh         = ,,
#restorefh.label   = nfs.nfs_procedure.restorefh
#restorefh.formula = nfsclient.ops.restorefh.ops
#savefh
#savefh         = ,,
#savefh.label   = nfs.nfs_procedure.savefh
#savefh.formula = nfsclient.ops.savefh.ops
#secinfo
secinfo         = ,,
secinfo.label   = nfs.nfs_procedure.secinfo
secinfo.formula = nfsclient.ops.secinfo.ops
#setattr
setattr         = ,,
setattr.label   = nfs.nfs_procedure.setattr
setattr.formula = nfsclient.ops.setattr.ops
#setclientid
setclientid         = ,,
setclientid.label   = nfs.nfs_procedure.setclientid
setclientid.formula = nfsclient.ops.setclientid.ops
#setcltid_confirm
setcltid_confirm         = ,,
setcltid_confirm.label   = nfs.nfs_procedure.setcltid_confirm
setcltid_confirm.formula = nfsclient.ops.setclientid_confirm.ops
#verify
#verify         = ,,
#verify.label   = nfs.nfs_procedure.verify
#verify.formula = nfsclient.ops.verify.ops
#open
open         = ,,
open.label   = nfs.nfs_procedure.open
open.formula = nfsclient.ops.open_noattr.ops
#openattr
openattr         = ,,
openattr.label   = nfs.nfs_procedure.openattr
openattr.formula = nfsclient.ops.open.ops
#open_confirm
open_confirm         = ,,
open_confirm.label   = nfs.nfs_procedure.open_confirm
open_confirm.formula = nfsclient.ops.open_confirm.ops
#exchange_id
exchange_id         = ,,
exchange_id.label   = nfs.nfs_procedure.exchange_id
exchange_id.formula = nfsclient.ops.exchange_id.ops
#create_session
create_session         = ,,
create_session.label   = nfs.nfs_procedure.create_session
create_session.formula = nfsclient.ops.create_session.ops
#destroy_session
destroy_session         = ,,
destroy_session.label   = nfs.nfs_procedure.destroy_session
destroy_session.formula = nfsclient.ops.destroy_session.ops
#bind_conn_to_session
bind_conn_to_session         = ,,
bind_conn_to_session.label   = nfs.nfs_procedure.bind_conn_to_session
bind_conn_to_session.formula = nfsclient.ops.bind_conn_to_session.ops
#delegreturn
delegreturn         = ,,
delegreturn.label   = nfs.nfs_procedure.delegreturn
delegreturn.formula = nfsclient.ops.delegreturn.ops
#getfh
#getfh         = ,,
#getfh.label   = nfs.nfs_procedure.getfh
#getfh.formula = nfsclient.ops.getfh.ops
#lock
lock         = ,,
lock.label   = nfs.nfs_procedure.lock
lock.formula = nfsclient.ops.lock.ops
#lockt
lockt         = ,,
lockt.label   = nfs.nfs_procedure.lockt
lockt.formula = nfsclient.ops.lockt.ops
#locku
locku         = ,,
locku.label   = nfs.nfs_procedure.locku
locku.formula = nfsclient.ops.locku.ops
#lookup
#lookupp         = ,,
#lookupp.label   = nfs.nfs_procedure.lookupp
#lookupp.formula = nfsclient.ops.lookupp.ops
#open_downgrade
open_downgrade         = ,,
open_downgrade.label   = nfs.nfs_procedure.open_downgrade
open_downgrade.formula = nfsclient.ops.open_downgrade.ops
#nverify
#nverify         = ,,
#nverify.label   = nfs.nfs_procedure.nverify
#nverify.formula = nfsclient.ops.nverify.ops
#release_lockowner
release_lockowner         = ,,
release_lockowner.label   = nfs.nfs_procedure.release_lockowner
release_lockowner.formula = nfsclient.ops.release_lockowner.ops
#backchannel_ctl
#backchannel_ctl         = ,,
#backchannel_ctl.label   = nfs.nfs_procedure.backchannel_ctl
#backchannel_ctl.formula = nfsclient.ops.backchannel_ctl.ops
#free_stateid
free_stateid         = ,,
free_stateid.label   = nfs.nfs_procedure.free_stateid
free_stateid.formula = nfsclient.ops.free_stateid.ops
#get_dir_delegation
#get_dir_delegation         = ,,
#get_dir_delegation.label   = nfs.nfs_procedure.get_dir_delegation
#get_dir_delegation.formula = nfsclient.ops.get_dir_delegation.ops
#getdeviceinfo
getdeviceinfo         = ,,
getdeviceinfo.label   = nfs.nfs_procedure.getdeviceinfo
getdeviceinfo.formula = nfsclient.ops.getdeviceinfo.ops
#getdevicelist
getdevicelist         = ,,
getdevicelist.label   = nfs.nfs_procedure.getdevicelist
getdevicelist.formula = nfsclient.ops.getdevicelist.ops
#layoutcommit
layoutcommit         = ,,
layoutcommit.label   = nfs.nfs_procedure.layoutcommit
layoutcommit.formula = nfsclient.ops.layoutcommit.ops
#layoutget
layoutget         = ,,
layoutget.label   = nfs.nfs_procedure.layoutget
layoutget.formula = nfsclient.ops.layoutget.ops
#layoutreturn
layoutreturn         = ,,
layoutreturn.label   = nfs.nfs_procedure.layoutreturn
layoutreturn.formula = nfsclient.ops.layoutreturn.ops
#secinfo_no_name
secinfo_no_name         = ,,
secinfo_no_name.label   = nfs.nfs_procedure.secinfo_no_name
secinfo_no_name.formula = nfsclient.ops.secinfo_no_name.ops
#sequence
sequence         = ,,
sequence.label   = nfs.nfs_procedure.sequence
sequence.formula = nfsclient.ops.sequence.ops
#set_ssv
#set_ssv         = ,,
#set_ssv.label   = nfs.nfs_procedure.set_ssv
#set_ssv.formula = nfsclient.ops.set_ssv.ops
#test_stateid
test_stateid         = ,,
test_stateid.label   = nfs.nfs_procedure.test_stateid
test_stateid.formula = nfsclient.ops.test_stateid.ops
#want_delegation
#want_delegation         = ,,
#want_delegation.label   = nfs.nfs_procedure.want_delegation
#want_delegation.formula = nfsclient.ops.want_delegation.ops
#destroy_clientid
destroy_clientid         = ,,
destroy_clientid.label   = nfs.nfs_procedure.destroy_clientid
destroy_clientid.formula = nfsclient.ops.destroy_clientid.ops
#reclaim_complete
reclaim_complete         = ,,
reclaim_complete.label   = nfs.nfs_procedure.reclaim_complete
reclaim_complete.formula = nfsclient.ops.reclaim_complete.ops

[ovirt-postgresql]
interval = 10s
#collectd.postgresql.pg_numbackends
#How many server processes this database is using.
numbackends         = ,,
numbackends.label   = postgresql.pg_numbackends
numbackends.formula = postgresql.stat.database.numbackends
#collectd.postgresql.pg_n_tup_g
#live
#The number of live rows in the database.
n_tup_g_live         = ,,
n_tup_g_live.label   = postgresql.pg_n_tup_g.live
n_tup_g_live.formula = postgresql.stat.all_tables.n_live_tup
#dead
n_tup_g_dead         = ,,
n_tup_g_dead.label   = postgresql.pg_n_tup_g.dead
n_tup_g_dead.formula = postgresql.stat.all_tables.n_dead_tup
#The number of dead rows in the database. Rows that are deleted
#or obsoleted by an update are not physically removed from their
#table; they remain present as dead rows until a VACUUM is performed.

#collectd.postgresql.pg_n_tup_c
#del
#The number of delete operations.
n_tup_c_del         = ,,
n_tup_c_del.label   = postgresql.pg_n_tup_c.del
n_tup_c_del.formula = postgresql.stat.all_tables.n_tup_del

#upd
#The number of update operations.
n_tup_c_upd         = ,,
n_tup_c_upd.label   = postgresql.pg_n_tup_c.upd
n_tup_c_upd.formula = postgresql.stat.all_tables.n_tup_upd

#hot_upd
#The number of update operations that have been performed without requiring an index update.
n_tup_c_hotupd         = ,,
n_tup_c_hotupd.label   = postgresql.pg_n_tup_c.hot_upd
n_tup_c_hotupd.formula = postgresql.stat.all_tables.n_tup_hot_upd

#ins
#The number of insert operations.
n_tup_c_ins         = ,,
n_tup_c_ins.label   = postgresql.pg_n_tup_c.ins
n_tup_c_ins.formula = postgresql.stat.all_tables.n_tup_ins

#collectd.postgresql.pg_xact
#num_deadlocks
#The number of deadlocks that have been detected by the
#database. Deadlocks are caused by two or more competing actions that
#are unable to finish because each is waiting for the other’s
#resources to be unlocked.
pg_xact         = ,,
pg_xact.label   = postgresql.pg_xact.num_deadlocks
pg_xact.formula = postgresql.stat.database_conflicts.deadlock

#collectd.postgresql.pg_db_size
#The size of the database on disk, in bytes.

#collectd.postgresql.pg_blks
#heap_read
#How many disk blocks have been read.
pg_blks_read         = ,,
pg_blks_read.label   = postgresql.pg_blks.heap_read
pg_blks_read.formula = postgresql.stat.database.blks_read
#heap_hit
#How many read operations were served from the buffer in memory, so
#that a disk read was not necessary. This only includes hits in the
#PostgreSQL buffer cache, not the operating system’s file system
#cache.
pg_blks_hit         = ,,
pg_blks_hit.label   = postgresql.pg_blks.heap_hit
pg_blks_hit.formula = postgresql.stat.database.blks_hit

#idx_read
#How many disk blocks have been read by index access operations.
idx_read         = ,,
idx_read.label   = postgresql.pg_blks.idx_read
idx_read.formula = postgresql.statio.all_indexes.idx_blks_read

#idx_hit
#How many index access operations have been served from the buffer in memory.
idx_hit         = ,,
idx_hit.label   = postgresql.pg_blks.idx_hit
idx_hit.formula = postgresql.statio.all_indexes.idx_blks_hit

#toast_read
#How many disk blocks have been read on TOAST tables.
toast_read         = ,,
toast_read.label   = postgresql.pg_blks.toast_read
toast_read.formula = postgresql.statio.all_tables.toast_blks_read
#toast_hit
#How many TOAST table reads have been served from buffer in memory.
toast_hit         = ,,
toast_hit.label   = postgresql.pg_blks.toast_hit
toast_hit.formula = postgresql.statio.all_tables.toast_blks_hit

#tidx_read
#How many disk blocks have been read by index access operations on TOAST tables.
tidz_read         = ,,
tidz_read.label   = postgresql.pg_blks.tidx_read
tidz_read.formula = postgresql.statio.all_tables.tidx_blks_read

[ovirt-proc]
interval = 10s
#collectd.processes.ps_state
ps_state         = ,,
ps_state.label   = processes.ps_stat
ps_state.formula = proc.psinfo.flags
#collectd.processes.ps_disk_ops.read
#ps_disk_ops
ps_disk_ops_read         = ,,
ps_disk_ops_read.label   = processes.ps_disk_ops.read
ps_disk_ops_read.formula = proc.io.read_bytes

#collectd.processes.ps_disk_ops.write
#ps_disk_ops
ps_disk_ops_write         = ,,
ps_disk_ops_write.label   = processes.ps_disk_ops.write
ps_disk_ops_write.formula = proc.io.write_bytes

#collectd.processes.ps_vm
#ps_vm
ps_vm         = ,,
ps_vm.label   = processes.ps_vm
ps_vm.formula = proc.memory.vmsize

#collectd.processes.ps_rss
#ps_rss
ps_rss         = ,,
ps_rss.label   = processes.ps_rss
ps_rss.formula = proc.memory.rss

#collectd.processes.ps_data
#ps_data
ps_data         = ,,
ps_data.label   = processes.ps_data
ps_data.formula = proc.memory.vmdata

#collectd.processes.ps_code
#ps_code
ps_code         = ,,
ps_code.label   = processes.ps_code
ps_code.formula = proc.psinfo.start_code

#collectd.processes.ps_stacksize
#ps_stacksize
ps_stacksize         = ,,
ps_stacksize.label   = processes.ps_stacksize
ps_stacksize.formula = proc.memory.vmstack
#collectd.processes.ps_cputime.syst
#ps_cputime
syst_ps_cputime         = ,,
syst_ps_cputime.label   = processes.ps_cputime.syst
syst_ps_cputime.formula = proc.psinfo.stime

#collectd.processes.ps_cputime.user
#ps_cputime
user_ps_cputime         = ,,
user_ps_cputime.label   = processes.ps_cputime.user
user_ps_cputime.formula = proc.psinfo.utime

#collectd.processes.ps_count.processes
#ps_count
nprocs         = ,,
nprocs.label   = processes.ps_count.processes
nprocs.formula = proc.nprocs

#collectd.processes.ps_count.threads
#ps_count
threads         = ,,
threads.label   = processes.ps_count.threads
threads.formula = proc.psinfo.threads

#collectd.processes.ps_pagefaults.majfltadd
#ps_pagefaults
majfltadd         = ,,
majfltadd.label   = processes.ps_pagefaults.majfltadd
majfltadd.formula = proc.psinfo.cmaj_flt

#collectd.processes.ps_pagefaults.minflt
#ps_pagefaults
minflt         = ,,
minflt.label   = processes.ps_pagefaults.minflt
minflt.formula = proc.psinfo.cmin_flt

#collectd.processes.ps_disk_octets.write
#ps_disk_octets

#collectd.processes.ps_disk_octets.read
#ps_disk_octets

#collectd.processes.fork_rate
#fork_rate
fork_rate         = ,,
fork_rate.label   = processes.fork_rate
fork_rate.formula = kernel.all.sysfork

[ovirt-swap]
interval = 10s
#collectd.swap.swap
#used / free / cached
#The used, available, and cached swap space (in bytes).
swap_used         = ,,
swap_used.label   = swap.swap.used
swap_used.formula = swap.used

swap_free         = ,,
swap_free.label   = swap.swap.free
swap_free.formula = swap.free

#swap_used         = ,,
#swap_used.label   = swap.swap.cached
#swap_used.formula = swap.

#collectd.swap.swap_io
#swap_io
#in / out
#The number of swap pages written and read per second.
swap_io_out         = ,,
swap_io_out.label   = swap.swap_io.in
swap_io_out.formula = swap.pagesin

swap_io_in         = ,,
swap_io_in.label   = swap.swap_io.out
swap_io_in.formula = swap.pagesout

#collectd.swap.percent
#percent
#used / free / cached
#The percentage of used, available, and cached swap space.
swapp_used         = ,,
swapp_used.label   = swap.percent.used
swapp_used.formula = 100 * swap.used / swap.length

swapp_free         = ,,
swapp_free.label   = swap.percent.free
swapp_free.formula = 100 * swap.free / swap.length

#swapp_cached         = ,,
#swapp_cached.label   = swap.percent.used
#swapp_cached.formula =
